--JOIN

-- INNER JOIN
--PEGA DADOS QUE EXISTEM EM AMBAS TABELAS
-- FUNCIONA COMO INTERCECÇÃO ENTRE DUAS TABELAS
-- SE O DADO EXISTEIR SO EM UMA NÃO APARECERA
/*SINTAX
SELECT COLUNAS 
FROM TABELA1
INNER JOIN TABELA2
ON TABELA1.COLUNA = TABELA2.COLUNA
*/
--EXEMPLO 1
SELECT* FROM TABELA_LIVRO
INNER JOIN TABELA_AUTORES
ON TABELA_LIVRO.ID_LIVRO = TABELA_AUTORES.ID_AUTOR --PONTO DE RELACIONAMENTO

--EXEMPLO 2 COM COLUNAS EXPESIFICAS

SELECT TABELA_LIVRO.NOME_LIVRO,TABELA_LIVRO.ISBN,
TABELA_AUTORES.NOME_AUTOR
FROM TABELA_LIVRO
INNER JOIN TABELA_AUTORES
ON TABELA_LIVRO.ID_LIVRO = TABELA_AUTORES.ID_AUTOR

--EXEMPLO 3 USANDO ALIAS
SELECT L.NOME_LIVRO,E.NOME_EDITORA
FROM TABELA_LIVRO AS L
INNER JOIN TABELA_EDITORA AS E
ON L.ID_EDITORA = E.ID_EDITORA
/* INVEZ DE ESCREVER TABELA_LIVRO.NOME_LIVRO USOU-SE
    L.NOME_LIVRO*/

--OUTER JOINS

--LEFT JOIN
/*LEFT JOIN RETRNA TODAS LINHAS DA TABELA A ESQUERDA
 MESMO SE NÃO HOUVER NENHUMA CORRESPONDENCIA A DIREITA*/
 
 --SIMTAX
 /*SELECT COLUNAS 
 FROM TABELA DA ESQUERDA
 LEFT (OUTER) JOIN TABELA DA DIREITA
 ON TABELA DA ESQUERDA.COLUNA = TABELA DA DIREITA.COLUNA*/

 --EXEMPLO
 --TRAZ INFORMAÇÕES COMUNS ENTRE AS TABELAS
 --TRAZ  SO OS LIVROS QUE TEM AUTOR
 SELECT * FROM TABELA_LIVRO
 LEFT JOIN TABELA_AUTORES
 ON TABELA_LIVRO.ID_AUTOR = TABELA_AUTORES.ID_AUTOR

-- COM WHERE TRAZ VALORES QUE NÃO SÃO COMUNS NAS DUAS TABELS
-- TRAZ SO OS LIVROS SEM AUTOR
SELECT * FROM TABELA_LIVRO
 LEFT JOIN TABELA_AUTORES
 ON TABELA_LIVRO.ID_AUTOR = TABELA_AUTORES.ID_AUTOR
WHERE TABELA_AUTORES.ID_AUTOR IS NULL

 --RIGHT JOIN
/*LEFT JOIN RETRNA TODAS LINHAS DA TABELA A DIREITA
 MESMO SE NÃO HOUVER NENHUMA CORRESPONDENCIA A ESQUERDA*/

 /*SELECT COLUNAS FROM TABELAS A ESQUERDA
 RIGHT JOIN TABELA A DIREITA
 ON TABELA A ESQUERDA.COLUNA = TABELA A DIREITA.COLUNA */

SELECT * FROM TABELA_AUTORES
 RIGHT JOIN TABELA_LIVRO
 ON TABELA_LIVRO.ID_AUTOR = TABELA_AUTORES.ID_AUTOR
--WHERE TABELA_AUTORES.ID_AUTOR IS NULL -EXCLUINDO DADOS COM CAMPO NULL

 --FULL JOIN
 /*RETORNA LINHA QUANDO HOUVER CORRESPONDENCIA EM QUALQUER
 UMA DAS TABELAS É UMA COMBINAÇÃO DE LEFT E RIGH JOINS.*/

 /*TRAZ TODAS AS INFORMAÇOES ATE AS QUE NAO TEM
  CAMPO DE RELACIONAMENTO ID PREENCHIDO */
  
  --SINTAX
  /*
  SELECT COLUNAS
  FROM TABELA 1
  FULL JIN TABELA 2
  ON TABELA1.COLUNA = TABELA2.COLUNA */

  --EXEMPLO
  SELECT LI.NOME_LIVRO,LI.ID_AUTOR,AU.NOME_AUTOR
  FROM TABELA_LIVRO AS LI
  FULL JOIN TABELA_AUTORES AS AU
  ON LI.ID_AUTOR = AU.ID_AUTOR
  --TRAS OS VALORES DE DUAS TABELAS E TBM OS VALORES QUEESTÃO COMO NUM

  --TRAZER SO OS CAMPOS NULL
  SELECT LI.NOME_LIVRO,LI.ID_AUTOR,AU.NOME_AUTOR
  FROM TABELA_LIVRO AS LI
  FULL JOIN TABELA_AUTORES AS AU
  ON LI.ID_AUTOR = AU.ID_AUTOR
  WHERE LI.ID_AUTOR IS NULL
  OR AU.ID_AUTOR IS NULL

--USANDO IN E NOT IN
-- SELECIONA VALORES QUE ESTÃO NUMA CONDIÇÃO ESPEFIFICADA FUNCIONA COMO UM OR

--EXEMPLO IN
SELECT * FROM TABELA_LIVRO WHERE ID_AUTOR IN (1,2) 

--EXEMPLO NOT  IN
SELECT * FROM TABELA_LIVRO WHERE ID_AUTOR NOT IN (1,2)

--CAMPOS CALCULADOS
--FAZ CALCULO DE UM CAMPO NA TABELA AUTOMATICAMENTE

--TABELA DE EXEMPLO
CREATE TABLE PRODUTOS(
CODIGOPRODUTO SMALLINT,
NOMEPRODUTO VARCHAR(20),
PRECO MONEY,
QUANTIDADE SMALLINT,
TOTAL AS(PRECO*QUANTIDADE) -- CAMPO CALCULADO SOZINHO
)
--INSERINDO VALORES NAS TABELAS
INSERT INTO PRODUTOS VALUES(1,'MOUSE',15.00,2)
INSERT INTO PRODUTOS VALUES(2,'TECLADO',15.00,2)
INSERT INTO PRODUTOS VALUES(3,'FONES',15.00,2)
INSERT INTO PRODUTOS VALUES(4,'PENDRIVE',15.00,2)
INSERT INTO PRODUTOS VALUES(5,'SD CARD',15.00,2)
INSERT INTO PRODUTOS VALUES(6,'DVD-R',15.00,2)
--SELECIONANDO E EXIBINDO OS VALORES
SELECT * FROM PRODUTOS
--CAMPO TOTAL CALCULADO AUTOMATICAMENTO

--CRIANDO INDICE
--USUARIOS NÃO VEEM OS INDICES
--PERMITE ENCONTRAR DADOS MAIS RAPIDAMENTE SEM TER QUE LER A TABELA TODA
--SO PODE TER EM UMA TABELA DE CADA VEZ UMA TABELA NÃO PODE TER MAIS DE 1 INDICE

/*SINTAX
 CREATE INDEX NOME_INDICE
 ON NOME_TABELA(NOME_COLUNA)*/

 --EXEMPLO
CREATE INDEX INDICE_NOME_LIVRO
ON TABELA_LIVRO(NOME_LIVRO)

--COMO CRIAR REGRAS
/* EXPECIFICA SE O BANCO PODE OU NÃO RECEBER NOVOS REGISTROS OU
QUAIS VALORES AS COLUNAS PODE RECEBER */

/*POR EXEMPLO CRIANDO REGRA QUE NÃO PERMITE CADASTRO QUE
PRECO DO LIVRO SEJA MENOR QUE 10 */

--CRIAÇÃO DA REGRA
CREATE RULE RL_PRECO AS @VALOR>10.00
--APLICANDO REGRA A COLUNA DESEJADA
EXECUTE sp_bindrule RL_PRECO,'TABELA_LIVRO.PRECO_LIVRO'
/*
EXPLICAÇÃO
EXECUTE A PROCEDORE RL_PRECO NA TABELA_LIVRO NA COLUNA PRECO_LIVRO
*/
-- FAZENDO UPDATE EM UMA TABELA
UPDATE TABELA_LIVRO 
SET PRECO_LIVRO  = 50.00
WHERE ID_LIVRO = 105

--COMO FAZER BACKUP DO BANCO DE DADOS
/*SINTAX
BACKUP DATABASE NOME DO BACKUP
TO DISK = 'LUGAR ONDE VC QUER SALVAR O BACKUP'
WITH FORMAT;
GO
*/

--EXEMPLO
BACKUP DATABASE DB_BIBLIOTECA 
TO DISK = 'B:\FATEC\5-SEMESTRE\Rebeca/TEST.BAK'
--WITH FORMAT;-- CASO QUEIRA FORMATAR O DISCO ONDE SERA FEITO BACKUP
GO

--CONCATENAÇÃO DE STRINGS, USA SE SINAL DE +
--EXEMPLO STRING + STRING
SELECT 'LINCOLN'+'ALMEIDA' AS ESTUDANTE
--COLUNA+COLUNA
SELECT NOME_AUTOR +'    '+SOBRENOME_AUTOR AS 'NOME COMPLETO' FROM TABELA_AUTORES
--STRING + COLUNA
SELECT 'EU GOSTO DO LIVRO ' + NOME_LIVRO AS 'MEU LIVRO' FROM TABELA_LIVRO
--WHERE ID_AUTOR = 2 ,O USO  WHERE É OPCIONAL

--COLLATION NO SQL
/*SEMELHANTE AO UTF8 É A CONFIGURAÇÃO DOS CARACTERES USADOS COMO Ç PONTOS ACENTOS ETC*/

--EXIBE AS OPÇÕES DE COLEÇÕES DISPONIVEIS
SELECT * FROM FN_HELPCOLLATIONS()

--VER A COLEÇÃO USADA ATUALMENTE NO SERVIDOR
SELECT SERVERPROPERTY('COLAATION')
--MUDANDO A COLLATION
ALTER DATABASE BIBLIOTECA COLLATE GREEK_CI_AI

--WITH TIES
--VERIFICA SE TEM MAIS ITENS COM MESMO VALOR NO COMANDO TOP
--EXEMPLO
SELECT TOP (3) WITH TIES NOME_LIVRO,ID_LIVRO
FROM TABELA_LIVRO ORDER BY ID_LIVRO ASC

--VIEWS
--SINTAX
/*
CREATE VIEW NOME_DA_VIEW
AS SELECT COLUNAS
FROM TABELA
WHERE CONDIÇÕES
*/

--EXEMPLO
USE DB_BIBLIOTECA
--CRIANDO VIEW
CREATE VIEW LIVROSAUTORES2
AS SELECT TABELA_LIVRO.NOME_LIVRO AS LIVRO,
TABELA_AUTORES.NOME_AUTOR AS AUTOR FROM TABELA_LIVRO
INNER JOIN TABELA_AUTORES
ON TABELA_LIVRO.ID_AUTOR = TABELA_AUTORES.ID_AUTOR

--FAZENDO CONSULTA
SELECT LIVRO,AUTOR FROM LIVROSAUTORES2
WHERE LIVRO LIKE 'W%'

--ALTERANDO VIEW
ALTER VIEW LIVROSAUTORES2 AS
SELECT TABELA_LIVRO.NOME_LIVRO ASLIVRO,
TABELA_AUTORES.NOME_AUTOR AS AUTOR,
PRECO_LIVRO AS VALOR FROM TABELA_LIVRO
INNER JOIN TABELA_AUTORES
ON TABELA_LIVRO.ID_AUTOR=TABELA_AUTORES.ID_AUTOR

--EXIBINDO VIEW ALTERADA
SELECT * FROM LIVROSAUTORES2

--EXCLUINDO VIEW
--SINTAX
--DROP VIEW NOME_DA_VIEW
--EXEMPLO
--DROP VIEW_LIVROSAUTORES2 -- DEIXEI NO COMENTARIO PQ NÃO QUERO EXCLUIR

--SUBQUERY
-- UMA CONSULTA DENTRO DE UMA CONSULTA

--SINTAX
 /*
SELECT(SELECT 'CONSULTA') AS NOMEDASUBQUERY  */

SELECT(SELECT 'FABIO') AS SUBCONSULTA

/*
SELECT CL.NOME_CLIENTE,PR.PRECO_PRODUTO * CO_QUANTIDADE AS TOTAL
FROM CLIENTES AS CL
INNER JOIN COMPRAS AS CO
INNER JOIN COMPRAS AS CO
ON CL.ID_CLIENTE = O.ID_CLIENTE
INNER JOIN PRODUTOS AS PR
ON CO.ID_PRODUTO = PR.ID_PRODUTO
ORDER BY CL.NOME_CLIENTE
ESTE CODIGO DARIA ERRO POIS O GROUP BY NAO ACITA PRECO DO PRODUTO E QUANTIDADE PQ ELES NÃO FAZEM PARTE DA TABELA
*/

--EXEMPLO SUBQUERY
/*
SELECT RESULTADO.CLIENTE,SUM(RESULTADO.TOTAL) AS TOTAL
FROM 
(SELECT CL.NOME_CLIENTES AS CLIENTE,PR.PRECO_PRODUTO*CO.QUANTIDADE
FROM CLIENTES AS CL
INNER JOIN COMPRAS AS CO
ON CL.ID_CLIENTE = CO.ID_CLIENTE
INNER JOIN PRODUTOS AS PR
ON CO.ID_PRODUTOS = PR.ID_PRODUTOS) AS RESULTADO
GROUP BY RESULTADO.CLIENTE
ORDER BY TOTAL
*/

--CTE COMMON TABLE EXPRESSION OUTRA FORMA DE SUBCONSULTA

--EXEMPLO
/*
USE NOMEDOBANCO
GO
WITH CONSULTACTE (CLIENTE,TOTAL)
AS (SELECT CL.NOME_CLIENTE AS CLIENTE,
PR.PRECO_PRODUTO*CO.QUANTIDADE AS TOTAL
FROM CLIENTES AS CL
INNER JOIN COMPRAS AS CO
ON CL.ID_CLIENTE = CO.ID_CLIENTE
INNER JOIN PRODUTOS AS PR
ON CO.ID_PRODUTO = PR_PRODUTO)

SELECT CLIENTE ,SUM(TOTAL) AS VALOR TOTAL
FROM CONSULTA CTE
GROUP BY CLIENTE
ORDER BY VALORTOTAL
*/

--VARIAVEIS
--USA SE A PALAVRA DECLARE @NOMEDA VARIAVEL TIPO,
--SO NAO TEM VIRGULA NA ULTIMA VARIAVEL
--SO PRESCISA USAR O DECLARE UMA VEZ
/* EXEMPLOS */

DECLARE @VALOR INT
DECLARE	@TEXTO VARCHAR(40)
DECLARE	@DATA_NASCIMENTO DATE
DECLARE	@DINHEIRO MONEY


--ATRIBUINDO VALOR A UMA VARIAVEL USA SE SET OU SELECT
--EXEMPLO
SET @VALOR = 50
SET @TEXTO = 'BOSON'
SET @DATA_NASCIMENTO = GETDATE()-- VARIAVEL RECEBE FUNÇÇAO
--EXIBINDO VALORES DA VARIAVEL

SELECT @VALOR AS VALOR,@TEXTO AS TEXTO,
@DATA_NASCIMENTO AS 'DATA DE NASCIMENTO',
@DINHEIRO AS SALARIO
--SO FUNCIONOU TUDO JUNTO
DECLARE @Idade  SMALLINT 
SET @Idade = 1 SELECT @Idade 


--ATRIBUINDO VALOR COM SELECT
--SELECT NOMEVAIAVEL = COLUNA FROM TABELA WHERE CONDICAO SELECT NOMEVARIAVEL AS ALIAS

DECLARE @LIVRO VARCHAR (30)
SELECT @LIVRO = NOME_LIVRO
FROM TABELA_LIVRO
WHERE ID_LIVRO = 101
SELECT @LIVRO AS 'NOME DO LIVRO'

--OUTRO EXEMPLO
DECLARE @PRECO MONEY,@QUANTIDADE INT,@NOME VARCHAR(30)
SET @QUANTIDADE = 5

SELECT @PRECO = PRECO_LIVRO,@NOME = NOME_LIVRO
FROM TABELA_LIVRO 
WHERE ID_LIVRO = 101

SELECT @NOME AS 'NOME DO LIVRO',
@PRECO * @QUANTIDADE AS 'PRECO DOS LIVROS'

-- CONVERSÃO DE TIPOS DE DADO CAST E CONVERT

--CAST
/*
SINTAX
CAST(EXPRESSÃO AS NOVO_TIPO_DE_DADOS
*/

--EXEMPLO
SELECT 'O PRECO DO LIVRO'+NOME_LIVRO+' É DE RS'
+CAST(PRECO_LIVRO AS VARCHAR(6)) AS ITEM FROM TABELA_LIVRO
WHERE ID_AUTOR = 2


--CONVERT
/*
SINTAX
CONVERT(NOVO_TIPO_DE_DADOS,EXPRESSAO,ESTILO)
*/

--EXEMPLO SEM ESTILO
SELECT 'O PRECO DO LIVRO'+NOME_LIVRO+' É DE RS'
+CONVERT( VARCHAR(6),PRECO_LIVRO)
FROM TABELA_LIVRO

--COM ESTILO O ESTILO´DE DATA É O 101
SELECT 'A DATA DA PUBLICACAO'+CONVERT(VARCHAR(18),DATA_PUBLICACAO,101)
FROM TABELA_LIVRO
WHERE ID_LIVRO = 102

--STORED PROCEDURE PROCEDIMENTO ARMAZENADO

--EXEMPLO
CREATE PROCEDURE TESTE AS SELECT 'IMPRIMINDO TEXTO'
EXECUTE TESTE --OU EXEC TESTE
USE DB_BIBLIOTECA
--EXEMPLO 2
CREATE PROCEDURE P_LIVROVALOR AS 
SELECT NOME_LIVRO,PRECO_LIVRO FROM TABELA_LIVRO
EXEC P_LIVROVALOR

--EXIBENDO DADOS DE UMA STORED PROCEDURE
SP_HELPTEXT P_LIVROVALOR

--CRIPTOGRAFANDO UMA STORED PROCEDURE
CREATE PROCEDURE p_LIVROISBN WITH ENCRYPTION
AS SELECT NOME_LIVRO,ISBN FROM TABELA_LIVRO

--MODIFICAR STORED PROCEDURE
/* SINTAX
ALTER PROCEDURE NOME_PROCEDIMENTO
BLOCO DE CODIGO */

--EXEMPLO
ALTER PROCEDURE TESTE (@PARAMETRO AS INT)
AS SELECT @PARAMETRO
EXEC TESTE 25

ALTER PROCEDURE P_LIVROVALOR(@ID AS SMALLINT)
AS SELECT NOME_LIVRO AS LIVRO,PRECO_LIVRO AS PRECO
FROM TABELA_LIVRO WHERE ID_LIVRO = @ID
EXEC P_LIVROVALOR 104

ALTER PROCEDURE TESTE(@PAR1 AS INT,@PAR2 AS VARCHAR(20))
AS
SELECT @PAR1
SELECT @PAR2
--PASSANDO PARAMETRO POR POSIÇAO
EXEC TESTE 26,'AZUL'
--PASSANDO PARAMETRO POR NOME DA VARIAVEL
EXEC TESTE @PAR2 = 'ABACAXI',@PAR1 = 30 


ALTER PROCEDURE SP(@ID SMALLINT,@PRECO MONEY)
AS --COMEÇO BLOCO CODIGO
SELECT NOME_LIVRO AS LIVRO,PRECO_LIVRO AS PRECO
FROM TABELA_LIVRO
WHERE ID_LIVRO > @ID AND PRECO_LIVRO > @PRECO
--EXECUTANDO A PROCEDURE
EXEC SP @ID = 103,@PRECO = 60

--OUTRO EXEMPLO
ALTER PROCEDURE P_LIVROVALOR(@QUANTIDADE SMALLINT,@ID SMALLINT)
AS 
SELECT NOME_LIVRO,PRECO_LIVRO*@QUANTIDADE AS PRECO FROM
TABELA_LIVRO WHERE ID_LIVRO = @ID
EXEC P_LIVROVALOR @ID = 103,@QUANTIDADE = 10

--PROCEDURE COM INSERÇÃO NO BANCO DE DADOS
CREATE PROCEDURE INSERE_EDITORA(@NOME VARCHAR (50))
AS
INSERT INTO TABELA_EDITORA(NOME_EDITORA)
VALUES (@NOME)
EXEC INSERE_EDITORA @NOME = 'ALPHA BOOKS'

SELECT * FROM TABELA_EDITORA -- CONFERINDO SE A EDITORA FOI INSERIDA

CREATE PROCEDURE TESTEPADRAO
(@PARAM1 INT, @PARAM2 VARCHAR(20) = 'VALOR PADRA')
AS
SELECT 'VALOR DO PARAMETRO 1 :'+CAST(@PARAM1 AS VARCHAR)
SELECT 'VALOR DO PARAMETRO 2'+@PARAM2

EXEC TESTEPADRAO 30
EXEC TESTEPADRAO @PARAM1 = 40,@PARAM2 ='VALORMODIFICADO'

--PARAMETRO DE SAIDA
CREATE PROCEDURE TESTE2 (@PAR1 AS INT OUTPUT)
AS
SELECT @PAR1*2
RETURN
--EXECUTANDO PASSANDO UM PARAMETRO
DECLARE @VALOR AS INT = 15
EXEC TESTE2 @VALOR OUTPUT
PRINT @VALOR

--RETURN
CREATE PROCEDURE RE (@QUANTIDADE SMALLINT,@COD SMALLINT = -10,@ID SMALLINT)
AS
--SET NOCOUNT ON --EVITA MOSTRAR AS LINHAS AFETADAS
IF @ID >= 100
BEGIN
SELECT NOME_LIVRO AS LIVRO,PRECO_LIVRO*@QUANTIDADE AS PRECO
FROM TABELA_LIVRO
WHERE ID_LIVRO = @ID 
RETURN 1
END
ELSE
RETURN @COD

--EXECUTANDO
DECLARE @CODIGO INT
EXEC @CODIGO = RE @ID = 103,@QUANTIDADE = 10
PRINT @CODIGO

CTRL + K +C -- COMENTA TUDO CODIGO SELECIONADO
CTRL + K +U -- DESCOMENTA CODIGO SELECIONADO
